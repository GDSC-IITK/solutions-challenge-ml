# -*- coding: utf-8 -*-
"""dbscan1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XwzFYxi0eD3214rhXEihsZCJlm6Z2gBx
"""

# DBSCAN Clustering

# Importing the libraries
import numpy as np
import pandas as pd

# Importing the dataset
dataset = pd.read_excel('restaurants.xlsx')
X = dataset.iloc[:, [0, 1]].values




dataset.head()

import matplotlib.pyplot as plt
plt.scatter(X[:, 0], X[:, 1])

k = int(input("Enter min samples: "))

# Using the elbow method to find the optimal number of clusters
from sklearn.cluster import DBSCAN
dbscan=DBSCAN(eps=0.01,min_samples=k)

# Fitting the model

model=dbscan.fit(X)

labels=model.labels_


from sklearn import metrics

#identifying the points which makes up our core points
sample_cores=np.zeros_like(labels,dtype=bool)

sample_cores[dbscan.core_sample_indices_]=True

#Calculating the number of clusters

n_clusters=5

print(metrics.silhouette_score(X,labels))

unique_labels = set(labels)


colors = [plt.cm.Spectral(each) for each in np.linspace(0, 1, len(unique_labels))]
for k, col in zip(unique_labels, colors):
    if k == -1:
        # Black used for noise.
        col = [0, 0, 0, 1]

    class_member_mask = labels == k

    xy = X[class_member_mask & sample_cores]
    plt.plot(
        xy[:, 0],
        xy[:, 1],
        "o",
        markerfacecolor=tuple(col),
        markeredgecolor="k",
        markersize=14,
    )

    xy = X[class_member_mask & ~sample_cores]
    plt.plot(
        xy[:, 0],
        xy[:, 1],
        "o",
        markerfacecolor=tuple(col),
        markeredgecolor="k",
        markersize=6,
    )

plt.title(f"Estimated number of clusters: {n_clusters}")
plt.show()

input_coordinates = input(" latitude and longitude: ")

float_strings = input_coordinates.split()
latitide = float(float_strings[0])
longi = float(float_strings[1])

n = int(input("how many nearest rest "))

distances = dataset.apply(lambda row: ((row["latitudes"] - latitide)**2 + (row["longitudes"] - longi)**2)**0.5, axis=1)
nearest_restaurants = dataset.iloc[distances.argsort()][:n]

# Print the n nearest restaurants
print("n nearest restaurants:")
print(nearest_restaurants[[ "latitudes", "longitudes"]])